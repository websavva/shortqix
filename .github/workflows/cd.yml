name: CD

on:
  release:
    types: ['released']

  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the app'
        required: true
        type: string

      skip-build:
        description: 'Skips build stage'
        type: boolean
        default: false

jobs:
  infer-version:
    runs-on: ubuntu-latest
    name: Infer version
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Infer app version
        shell: bash
        id: set_version
        run: |
          # If a release tag is present, use it; otherwise, use the input version
          if [ -n "${{ github.event.release.tag_name }}" ]; then
            VERSION_TAG="${{ github.event.release.tag_name }}"
            VERSION="${VERSION_TAG:1}"
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "Inferred version: $VERSION"

          # Set the output for the current step
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    name: Run build and push to registry
    needs: infer-version
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || inputs.skip-build == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.infer-version.outputs.version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Build and push to ghcr.io
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/websavva/shortqix:${{ needs.infer-version.outputs.version }}
          build-args: |
            NODE_ENV=production
            SQX_STAGE=production
            PORT=3000
            SQX_BASE_URL=${{ secrets.SQX_BASE_URL }}
            SQX_APP_NAME=${{ secrets.SQX_APP_NAME }}
            SQX_SUPPORT_EMAIL=${{ secrets.SQX_SUPPORT_EMAIL }}
            SQX_DOMAIN=${{ secrets.SQX_DOMAIN }}
            SQX_YM_ID=${{ secrets.SQX_YM_ID }}

      - name: Inspect
        run: |
          docker buildx imagetools inspect ghcr.io/websavva/shortqix:${{ needs.infer-version.outputs.version }}

  deploy:
    name: Deploy the app with Docker Compose
    runs-on: ubuntu-latest
    needs: [infer-version, build]

    environment:
      name: Production
      url: https://sqix.pro

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.infer-version.outputs.version }}

      - name: Pulling image
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: sqix.pro
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /apps/shortqix
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.DOCKER_REGISTRY_TOKEN }}
            docker image pull ghcr.io/websavva/shortqix:${{ needs.infer-version.outputs.version }}

      - name: Executing docker compose down
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: sqix.pro
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /apps/shortqix
            docker ps -q \
            --filter "label=com.docker.compose.project=shortqix" \
            | \
            xargs -r docker stop
            docker ps -aq \
            --filter "label=com.docker.compose.project=shortqix" \
            | \
            xargs -r docker rm
            docker network ls --filter "name=shortqix" --format "{{.Name}}" | xargs -r docker network rm

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: sqix.pro
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'deployment/docker-compose.yml'
          target: /apps/shortqix
          strip_components: 1

      - name: Copy nginx.conf.temp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: sqix.pro
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'deployment/nginx.conf.temp'
          target: /apps/shortqix
          strip_components: 1

      - name: Generating nginx.conf
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: sqix.pro
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /apps/shortqix
            export PORT=3000
            export SQX_DOMAIN="${{ secrets.SQX_DOMAIN }}"
            export SQX_DATABASE_CLIENT_DOMAIN="${{ secrets.SQX_DATABASE_CLIENT_DOMAIN }}"
            envsubst '${PORT} ${SQX_DOMAIN} ${SQX_DATABASE_CLIENT_DOMAIN}' < nginx.conf.temp > nginx.conf
            rm nginx.conf.temp

      - name: Deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: sqix.pro
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export NODE_ENV="production"
            export PORT="3000"
            export SQX_STAGE="production"
            export SQX_RELEASE_VERSION="${{ needs.infer-version.outputs.version }}"
            export SQX_DOMAIN="${{ secrets.SQX_DOMAIN }}"
            export SQX_DATABASE_CLIENT_DOMAIN="${{ secrets.SQX_DATABASE_CLIENT_DOMAIN }}"
            export SQX_DATABASE_CLIENT_USER="${{ secrets.SQX_DATABASE_CLIENT_USER }}"
            export SQX_DATABASE_CLIENT_PASSWORD="${{ secrets.SQX_DATABASE_CLIENT_PASSWORD }}"
            export SQX_BASE_URL="${{ secrets.SQX_BASE_URL }}"
            export SQX_APP_NAME="${{ secrets.SQX_APP_NAME }}"
            export SQX_SUPPORT_EMAIL="${{ secrets.SQX_SUPPORT_EMAIL }}"
            export SQX_POSTGRES_USER="${{ secrets.SQX_POSTGRES_USER }}"
            export SQX_POSTGRES_PASSWORD="${{ secrets.SQX_POSTGRES_PASSWORD }}"
            export SQX_POSTGRES_DB="${{ secrets.SQX_POSTGRES_DB }}"
            export SQX_POSTGRES_PORT="${{ secrets.SQX_POSTGRES_PORT }}"
            export SQX_POSTGRES_HOST="database"
            export SQX_SMTP_HOST="${{ secrets.SQX_SMTP_HOST }}"
            export SQX_SMTP_PORT="${{ secrets.SQX_SMTP_PORT }}"
            export SQX_SMTP_USER="${{ secrets.SQX_SMTP_USER }}"
            export SQX_SMTP_PASSWORD="${{ secrets.SQX_SMTP_PASSWORD }}"
            export SQX_SMTP_FROM="${{ secrets.SQX_SMTP_FROM }}"
            export SQX_AUTH_SECRET="${{ secrets.SQX_AUTH_SECRET }}"
            export SQX_AUTH_TOKEN_EXPIRES_IN_MS="${{ secrets.SQX_AUTH_TOKEN_EXPIRES_IN_MS }}"
            export SQX_AUTH_MAGIC_LINK_TOKEN_EXPIRES_IN_MS="${{ secrets.SQX_AUTH_MAGIC_LINK_TOKEN_EXPIRES_IN_MS }}"
            export SQX_SESSION_ID_COOKIE_EXPIRES_IN_MS="${{ secrets.SQX_SESSION_ID_COOKIE_EXPIRES_IN_MS }}"
            export SQX_COOKIE_DOMAIN="${{ secrets.SQX_COOKIE_DOMAIN }}"
            export SQX_PAYMENT_EXPIRES_IN_MS="${{ secrets.SQX_PAYMENT_EXPIRES_IN_MS }}"
            export SQX_NON_PREMIUM_SHORT_URLS_MAX_COUNT="${{ secrets.SQX_NON_PREMIUM_SHORT_URLS_MAX_COUNT }}"
            export SQX_PREMIUM_SHORT_URLS_MAX_COUNT="${{ secrets.SQX_PREMIUM_SHORT_URLS_MAX_COUNT }}"
            cd /apps/shortqix
            docker compose up -d
